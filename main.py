import aiogram
import re
import datetime
import time, random
import asyncio
from aiogram.types import CallbackQuery
from setting import * 
from database import create_bdx, add_complaint, find_complaint, get_complaints_stats, get_user_id_by_unique_id, update_complaint_status, get_earliest_complaint
from create_bot import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboard.default.menu import check_user_out_func, all_back_to_main_default, moder_func, check_user_adm 
from keyboard.inline.get_ban_unban import pc_or_mobile, set_default_commands, send_or_not, full_reviewed, check_or_not, check_func, sort_by, sort_by_server, sort_by_time
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled

storage = RedisStorage2(db=5)


def rate_limit(limit: int, key=None):

    def decorator(func):
        setattr(func, 'throttling_rate_limit', limit)
        if key:
            setattr(func, 'throttling_key', key)
        return func

    return decorator


class ThrottlingMiddleware(BaseMiddleware):

    def __init__(self, limit=DEFAULT_RATE_LIMIT, key_prefix='antiflood_'):
        self.rate_limit = limit
        self.prefix = key_prefix
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            limit = getattr(handler, 'throttling_rate_limit', self.rate_limit)
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            limit = self.rate_limit
            key = f"{self.prefix}_message"

        try:
            await dispatcher.throttle(key, rate=limit)
        except Throttled as t:
            await self.message_throttled(message, t)

            raise CancelHandler()

    async def message_throttled(self, message: types.Message, throttled: Throttled):
        """
        Notify user only on first exceed and ignore additional commands for some time

        :param message:
        :param throttled:
        """
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            key = f"{self.prefix}_message"

        # Calculate how many time is left till the block ends
        delta = throttled.rate - throttled.delta

        # Prevent flooding
        if throttled.exceeded_count == 2:
            await message.reply('üî∏ –ë—Ä–∞—Ç–∏—à, –Ω—É –Ω–µ —Ñ–ª—É–¥–∏ :( ')

        # Sleep.
        await asyncio.sleep(delta)

        # Check lock status
        thr = await dispatcher.check_key(key)

        # If current message is not last with current key - do not send message
        if thr.exceeded_count == throttled.exceeded_count:
            # await message.reply('')
             pass

intro_message = (
        "<b>üìñ –ë–æ—Ç –ê—Ä—Ç—É—Ä–∏—É—Å: –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã</b>\n\n"
        "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ê—Ä—Ç—É—Ä–∏—É—Å–∞ - —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –ø–æ–¥–∞—á–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∂–∞–ª–æ–±. "
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º —Ç–≤–æ—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n\n"
        "<b>üìå –ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</b>\n"
        "/start: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "<b>‚¨Ö –ù–∞ –≥–ª–∞–≤–Ω—É—é:</b> –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.\n"
        "üíé <b>–ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É:</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–µ—Ä: –ü–ö –∏–ª–∏ –ú–û–ë–ê–ô–õ.\n"
        "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n"
        "–í–≤–µ–¥–∏ –Ω–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è (–æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞.\n\n"
        "<b>üìû –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Å–≤—è–∂–∏—Å—å —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        "–¢–µ–ª–µ–≥—Ä–∞–º: @yurasalt\n\n"
        "<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b>\n\n"
        "–¢–≤–æ—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞.\n"
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏ –ª–æ–∂–Ω—ã–µ –∂–∞–ª–æ–±—ã –º–æ–≥—É—Ç –ø–æ–≤–ª–µ—á—å –∑–∞ —Å–æ–±–æ–π –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.\n\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ê—Ä—Ç—É—Ä–∏—É—Å–∞. üî∏" )

intro_message_moder = (
    "‚öô <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è</b>\n\n"
    "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –≤—ã –ø–æ–ø–∞–¥–µ—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –≥–¥–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª "
    "<b>üìù –ü—Ä–æ–≤–µ—Ä–∫–∞</b> –∏–ª–∏ <b>‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ</b>.\n\n"
    "üìù <b>–ü—Ä–æ–≤–µ—Ä–∫–∞</b>\n\n"
    "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∂–∞–ª–æ–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
    "–ü—Ä–∏ –≤—Ö–æ–¥–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏:\n\n"
    "1) <b>üé≤ –õ—é–±–∞—è</b> - –æ—Ç–∫—Ä–æ–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∂–∞–ª–æ–±—É –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.\n"
    "2) <b>‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</b> - –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∂–∞–ª–æ–±—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n"
    "–ï—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å <b>‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</b>, –ø–æ—è–≤—è—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:\n\n"
    "- <b>‚úÖ –°–µ—Ä–≤–µ—Ä</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞\n"
    "- <b>‚úÖ –í—Ä–µ–º—è</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã (–Ω–æ–≤—ã–µ/—Å—Ç–∞—Ä—ã–µ)\n"
    "- <b>‚úÖ –ù–∏–∫–Ω–µ–π–º</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è\n"
    "- <b>‚úÖ –¢–µ–≥–∏</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∂–∞–ª–æ–±–µ\n\n"
    "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ <b>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>.\n\n"
    "–û—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –∂–∞–ª–æ–±–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
    "- <b>‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</b> - –ø—Ä–∏–Ω—è—Ç—å –∂–∞–ª–æ–±—É\n"
    "- <b>‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</b> - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∂–∞–ª–æ–±—É (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)\n"
    "- <b>üõë –ó–∞–±–∞–Ω–∏—Ç—å</b> - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥–∞–≤—à–µ–≥–æ –∂–∞–ª–æ–±—É\n"
    "- <b>‚¨Ö –ù–∞–∑–∞–¥</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
    "‚úîÔ∏è <b>–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ</b>\n\n"
    "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ä–∞–Ω–µ–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã.\n\n"
    "–ö–Ω–æ–ø–∫–∞ <b>–õ—é–±–∞—è</b> –ø–æ–∫–∞–∂–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –æ–¥–æ–±—Ä–µ–Ω–Ω—É—é –∂–∞–ª–æ–±—É.\n"
    "<b>‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</b> –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∂–∞–ª–æ–±—ã, –∫–∞–∫ –∏ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞</b>.\n\n"
    "–ü–æ–¥ –∫–∞–∂–¥–æ–π –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∂–∞–ª–æ–±–æ–π –±—É–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏:\n\n"
    "- <b>‚úÖ –†–∞–∑–æ–±—Ä–∞–ª–∏—Å—å</b> - –ø–æ–º–µ—Ç–∏—Ç—å –∂–∞–ª–æ–±—É –∫–∞–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é\n"
    "- <b>üìû –°–≤—è–∑–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ</b> - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ\n"
    "- <b>üóë –°–∫—Ä—ã—Ç—å</b> - —Å–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—É—é –∂–∞–ª–æ–±—É\n\n"
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±–∞–º–∏.\n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É."
)




class ThisStatecer(StatesGroup):
    type = State()
    server = State()
    your_nickname = State()
    enemy_nickname = State()
    information = State()
    finish = State()
    tags = State()

class Moder(StatesGroup):
     comment = State()

class Filter(StatesGroup):
     under_begin = State()
     begin = State()
     server = State()
     time = State()
     nick = State()
     tags = State()
     start_search = State()
     check = State()
     
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" –∏ –∫–æ–º–∞–Ω–¥—ã "/start"
@dp.message_handler(regexp="/start", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
        await state.finish()
        await message.delete()
        image = open('images/meeten_main.jpeg', 'rb')
        await bot.send_photo(chat_id=message.chat.id, photo=image, caption=f"<b>üî∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ê—Ä—Ç—É—Ä–∏—É—Å–∞</b>\n\n"
                            "üî∏ –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã\n"
                            "üî∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                            reply_markup=check_user_out_func(message.chat.id))

@dp.message_handler(regexp="‚¨Ö –ù–∞ –≥–ª–∞–≤–Ω—É—é", state="*")
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
        await state.finish()
        image = open('images/meeten_main.jpeg', 'rb')
        await bot.send_photo(chat_id=message.chat.id, photo=image, caption=f"<b>üî∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –ê—Ä—Ç—É—Ä–∏—É—Å–∞</b>\n\n"
                            "üî∏ –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã\n"
                            "üî∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                            reply_markup=check_user_out_func(message.chat.id))
        
@dp.message_handler(regexp="üìû –¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
        await state.finish()
        await message.delete()
        image = open('images/meeten_main.jpeg', 'rb')
        await bot.send_photo(chat_id=message.chat.id, photo=image, caption=f"<b>üî∏ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø–∏—à–∏—Ç–µ: </b>\n\n"
                            "üî∏ <b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> @yurasalt\n",
                            reply_markup=check_user_out_func(message.chat.id))
        
@dp.message_handler(regexp="üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
        await state.finish()
        await message.delete()
        await message.answer(intro_message, parse_mode='HTML')

@dp.message_handler(regexp="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        await state.finish()
        await message.delete()
        await message.answer(intro_message_moder, parse_mode='HTML')

@dp.message_handler(regexp="üìû –í—Å–µ–≥–æ –∂–∞–ª–æ–±", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        await state.finish()
        stats = get_complaints_stats()
        text = f"<b>üìû –í—Å–µ–≥–æ –∂–∞–ª–æ–±:</b> <code>{stats['total_complaints']}</code>\n\n"
        text += "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:</b>\n"
        
        for server, server_stats in stats['server_stats'].items():
            text += f"<b>{server}:</b>\n"
            text += f"  ‚Ä¢ –í—Å–µ–≥–æ: <code>{server_stats['total']}</code>\n"
            text += f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: <code>{server_stats['checked']}</code>\n"
            text += f"  ‚Ä¢ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: <code>{server_stats['unchecked']}</code>\n"
            text += "  ‚Ä¢ –¢–æ–ø-3 —Ç–µ–≥–æ–≤: "
            
            if server_stats['top_tags']:
                top_tags = [f"<code>{tag}</code>" for tag, count in server_stats['top_tags']]
                text += ', '.join(top_tags)
            else:
                text += "<i>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>"
            
            text += "\n\n"
        
        await message.answer(text, parse_mode="HTML")

@dp.message_handler(regexp="üéÅ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
        await state.finish()
        await message.reply(
                    "<b>üéÅ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∂–∞–ª–æ–±—É</b>\n\n"
                    "<b>üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥</b>\n\n"
                    "–ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –≤–∞—à—É –∑–∞–±–æ—Ç—É –æ —á–∏—Å—Ç–æ—Ç–µ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤! –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –±–æ—Ä—å–±–µ —Å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è–º–∏ "
                    "–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥.\n\n"
                    "üèÜ –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ "
                    "–≤–∞—à–µ–π –∂–∞–ª–æ–±—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Å–æ–±—ã–µ –±–æ–Ω—É—Å—ã –∏ –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã.\n\n"
                    "–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–µ–µ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã. –ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–µ–º—Å—è "
                    "–ø–æ–æ—â—Ä—è—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!\n\n"
                    "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ: <b>–≤–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞</b>. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∫–ª–∞–¥ –≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö! üî∏",
        parse_mode='HTML'
    )

        
@dp.message_handler(regexp="‚öô –ú–æ–¥–µ—Ä–∞—Ü–∏—è", state="*")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        await state.finish()
        await message.reply("üî∏ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b> ",
        reply_markup=moder_func(message.chat.id))

@dp.message_handler(regexp="üìù –ü—Ä–æ–≤–µ—Ä–∫–∞", state="*")
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        await state.finish()
        await message.reply("üî∏ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∂–∞–ª–æ–±—ã –æ—Ç –∏–≥—Ä–æ–∫–æ–≤: </b> \n\n"
                            "<b>üé≤ –õ—é–±–∞—è</b> - –æ—Ç–∫—Ä–æ–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∂–∞–ª–æ–±—É –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.\n"
                            "<b>‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</b> - –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∂–∞–ª–æ–±—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n",
        reply_markup=check_func(message.chat.id))
        await Filter.under_begin.set()
    
@dp.callback_query_handler(text='random', state=Filter.under_begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        earliest_complaint = get_earliest_complaint()
        print(earliest_complaint)
        await callback.message.answer(f"üî∏ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞: \n\n"
                                f"<b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{earliest_complaint[2]}</code>\n"
                                f"<b>–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{earliest_complaint[3]}</code>\n"
                                f"<b>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> <code>{earliest_complaint[4]}</code>\n"
                                f"<b>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</b> <code>{earliest_complaint[5]}</code>\n"
                                f"<b>–ê–π–¥–∏:</b> <code>{earliest_complaint[6]}</code>\n"
                                f"<b>–¢–µ–≥–∏:</b> <code>{earliest_complaint[9]}</code>\n"
                                f"<b>–ñ–∞–ª–æ–±–∞:</b> \n\n{earliest_complaint[7]}\n", reply_markup=check_or_not(earliest_complaint[1], earliest_complaint[6]))
        await Filter.check.set()


@dp.message_handler(regexp="‚úîÔ∏è –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ", state="*")
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        await state.finish()
        await message.reply("üî∏ <b>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±: </b> \n\n"
                            "<b>üé≤ –õ—é–±–∞—è</b> - –æ—Ç–∫—Ä–æ–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∂–∞–ª–æ–±—É –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.\n"
                            "<b>‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</b> - –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∂–∞–ª–æ–±—ã –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n\n",
        reply_markup=check_func(message.chat.id))
        async with state.proxy() as data:
            data['only_see'] = 'True'
        await Filter.under_begin.set()
    
@dp.callback_query_handler(text='parametr', state=Filter.under_begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        async with state.proxy() as data:
            await callback.message.edit_text("üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: </b> \n\n"
                                            "<b>üîπ –°–µ—Ä–≤–µ—Ä</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–æ–º–µ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞\n"
                                            "<b>üîπ –í—Ä–µ–º—è</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã (–Ω–æ–≤—ã–µ/—Å—Ç–∞—Ä—ã–µ)\n"
                                            "<b>üîπ –ù–∏–∫–Ω–µ–π–º</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∏–∫–Ω–µ–π–º—É –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è\n"
                                            "<b>üîπ –¢–µ–≥–∏</b> - —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –∂–∞–ª–æ–±–µ\n\n",
            reply_markup=sort_by(callback.message.chat.id, data))
        await Filter.begin.set()
        
@dp.callback_query_handler(text='sort_server', state=Filter.begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        await callback.message.edit_reply_markup(sort_by_server(callback.message.chat.id))
        await Filter.server.set()


@dp.callback_query_handler(regexp="server_([0-9]*)", state=Filter.server)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    server = re.findall(r'^server_(\d+)', callback.data)[0]
    if check_user_adm(callback.message.chat.id):
        async with state.proxy() as data:
            data["server"] = server
            print(data)
            await callback.message.edit_reply_markup(sort_by(callback.message.chat.id, data))
            await Filter.begin.set()

@dp.callback_query_handler(text='sort_time', state=Filter.begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        await callback.message.edit_reply_markup(sort_by_time(callback.message.chat.id))
        await Filter.time.set()

@dp.callback_query_handler(regexp="time_(new|old)", state=Filter.time)
async def time_handler(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        time_type = re.findall(r'^time_(new|old)', callback.data)[0]

        async with state.proxy() as data:
            data["time"] = time_type
            await callback.message.edit_reply_markup(sort_by(callback.message.chat.id, data))
            await Filter.begin.set()

@dp.callback_query_handler(text='sort_nick', state=Filter.begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        await callback.message.edit_text(text="üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º: </b> ", reply_markup=None)
        async with state.proxy() as data:
            data["callback"] = callback.message
        await Filter.nick.set()

@dp.message_handler(state=Filter.nick)
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        async with state.proxy() as data:
            data["nick"] = message.text
            await message.delete()
            callback = data["callback"]
            await callback.edit_text(text="üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: </b> ", reply_markup = sort_by(message.chat.id, data))
            data.pop("callback", None)
            print(data)
            await Filter.begin.set()

@dp.callback_query_handler(text='sort_tags', state=Filter.begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        await callback.message.edit_text(text=(f"üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏: \n\n"
                                    f"<b>–ü—Ä–∏–º–µ—Ä:</b> <code>#–≤–∏—Ä—Ç—ã</code> <code>#–∞–¥–º–∏–Ω</code> <code>#—Å–ª–∏–≤</code> \n"),
                                      reply_markup=None)
        async with state.proxy() as data:
            data["callback"] = callback.message
        await Filter.tags.set()

@dp.message_handler(state=Filter.tags)
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    
        async with state.proxy() as data:
            data["tags"] = message.text
            await message.delete()
            callback = data["callback"]
            await callback.edit_text(text="üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: </b> ", reply_markup = sort_by(message.chat.id, data))
            data.pop("callback", None)
            print(data)
            await Filter.begin.set()

@dp.callback_query_handler(text='sort_start', state=Filter.begin)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        async with state.proxy() as data:
            only_see = data.get('only_see', False)
            complaint = find_complaint(data, 1 if only_see else 0)
        if len(complaint) != 0 and not only_see:
            complaint = complaint[0]
            await callback.message.edit_text(f"üî∏ –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞: \n\n"
                                    f"<b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{complaint[2]}</code>\n"
                                    f"<b>–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{complaint[3]}</code>\n"
                                    f"<b>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> <code>{complaint[4]}</code>\n"
                                    f"<b>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</b> <code>{complaint[5]}</code>\n"
                                    f"<b>–ê–π–¥–∏:</b> <code>{complaint[6]}</code>\n"
                                    f"<b>–¢–µ–≥–∏:</b> <code>{complaint[9]}</code>\n"
                                    f"<b>–ñ–∞–ª–æ–±–∞:</b> \n\n{complaint[7]}\n", reply_markup=check_or_not(complaint[1], complaint[6]))
            await Filter.check.set()
        elif len(complaint) != 0 and only_see:
            await callback.message.edit_text(f"üî∏ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã: \n\n")
            # Assuming you have the list of complaints stored in the variable 'complaints'
            for complaints in complaint:
                await asyncio.sleep(0.5)
                await callback.message.answer(f"üî∏ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞: \n\n"
                                        f"<b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{complaints[2]}</code>\n"
                                        f"<b>–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{complaints[3]}</code>\n"
                                        f"<b>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> <code>{complaints[4]}</code>\n"
                                        f"<b>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</b> <code>{complaints[5]}</code>\n"
                                        f"<b>–ê–π–¥–∏:</b> <code>{complaints[6]}</code>\n"
                                        f"<b>–¢–µ–≥–∏:</b> <code>{complaints[9]}</code>\n"
                                        f"<b>–ñ–∞–ª–æ–±–∞:</b> \n\n{complaints[7]}\n", reply_markup=full_reviewed(complaints[1], complaints[6]))
                await Filter.check.set()
        else:
             await callback.message.edit_text(text="‚õîÔ∏è <b>–ü–æ –¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: </b> ", reply_markup = sort_by(callback.message.chat.id, data)) 
             await Filter.begin.set()

@dp.callback_query_handler(text='hide', state=Filter.check)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await callback.message.delete()

@dp.callback_query_handler(text='comeback', state=Filter.check)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    if check_user_adm(callback.message.chat.id):
        async with state.proxy() as data:
            await callback.message.edit_text(text="üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: </b> ", reply_markup = sort_by(callback.message.chat.id, data))
            await Filter.begin.set()

@dp.message_handler(text="üíé –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    print(check_user_banned(message.chat.id))
    if not check_user_banned(message.chat.id):
        await message.delete()
        image = open('images/meeten_nick.jpeg', 'rb')
        msg = await bot.send_photo(chat_id=message.chat.id, photo=image, caption=f"üî∏ <b>–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º! </b>\n\n"
                            "üî∏ –°–µ—Ä–≤–µ—Ä - <b>–ü–ö</b> –∏–ª–∏ <b>–ú–û–ë–ê–ô–õ</b>? ",
                            reply_markup=pc_or_mobile())
        async with state.proxy() as data:
             data['msg']=  msg
        await ThisStatecer.type.set()
    else:
         await message.answer(f"üî∏ <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. </b>\n\n")
    

@dp.callback_query_handler(regexp="server_type_(pc|mobile)", state=ThisStatecer.type)
async def time_handler(callback: aiogram.types.CallbackQuery, state: FSMContext):
        server_type = re.findall(r'^server_type_(pc|mobile)', callback.data)[0]
        async with state.proxy() as data:
                data["type"] = server_type
                msg = data['msg']
        print(msg)
        await bot.edit_message_caption(
            caption=f"<b>üî∏ –¢–µ–ø–µ—Ä—å –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞: </b>\n\n"
                            "<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞: </b>",
            chat_id=callback.message.chat.id,
            message_id=msg.message_id,
            reply_markup=None)
        await ThisStatecer.server.set()

@dp.message_handler(state=ThisStatecer.server)
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    if not check_user_banned(message.chat.id):
        await message.delete()
        status = False
        if message.text.isdigit():
            async with state.proxy() as data:
                type = data["type"]
                msg = data ["msg"]

            if type == "pc":
                if not int(message.text) > 0 or not int(message.text) < 29:
                    await bot.edit_message_caption(
                        caption=f"<b>üî∏ –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ </b>\n\n"
                                        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: ",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=None)
                    await ThisStatecer.server.set()
                else:
                    status = True


            elif type == "mobile":
                if not int(message.text) > 0 or not int(message.text) < 4:
                    await bot.edit_message_caption(
                        caption=f"<b>üî∏ –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ </b>\n\n"
                                        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: ",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=None)
                    await ThisStatecer.server.set()
                else:
                    status = True

            if status:
                async with state.proxy() as data:
                            data["number"] = message.text

                await bot.edit_message_caption(
                        caption=f"<b>üî∏ –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –Ω–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: </b>",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=None)
                
                await ThisStatecer.enemy_nickname.set()
    else:
        await message.answer(f"üî∏ <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. </b>\n\n")

@dp.message_handler(state=ThisStatecer.enemy_nickname)
@rate_limit(1, 'start')
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    await message.delete()
    if len(message.text) > 2 and len(message.text) < 21:
        async with state.proxy() as data:
                data["nickname"] = message.text
                msg = data['msg']
        image = open('images/meeten_nick.jpeg', 'rb')
        await bot.edit_message_caption(
                        caption=f"üî∏ <b>–ú—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —É —Ü–µ–ª–∏ </b>\n\n"
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n" 
                                        "–í—Å–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–æ–π, –∏–Ω–∞—á–µ –ê—Ä—Ç—É—Ä –∏—Ö –Ω–µ —É–≤–∏–¥–µ—Ç. ",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=None)
        await ThisStatecer.information.set()
    else:
        await bot.edit_message_caption(
                        caption=f"üî∏ <b>–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–∏–π–Ω–µ–π–º</b>"
                                    "–ï–≥–æ –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–æ–≤–æ–ª–æ–≤ \n\n"
                                            "–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è: ",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=None)
        await ThisStatecer.enemy_nickname.set()

@dp.message_handler(state=ThisStatecer.information)
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    await message.delete()
    async with state.proxy() as data:
        data["information"] = message.text
        msg = data['msg']
        await bot.edit_message_caption(
                        caption=f"üî∏ –¢–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏: \n\n"
                                    f"<b>–ü—Ä–∏–º–µ—Ä:</b> <code>#–≤–∏—Ä—Ç—ã</code> <code>#–∞–¥–º–∏–Ω</code> <code>#—Å–ª–∏–≤</code> \n",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=None)
        await ThisStatecer.tags.set()
        
@dp.message_handler(state=ThisStatecer.tags)
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
    await message.delete()
    image = open('images/meeten_nick.jpeg', 'rb')
    async with state.proxy() as data:
            data["id"] = generate_complaint_id()
            data["tags"] = message.text
            msg = data['msg']
            await bot.edit_message_caption(
                        caption=f"üî∏ –û—Ç–ª–∏—á–Ω–æ, –º—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏: \n\n"
                                        f"<b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{data['type']}</code>\n"
                                        f"<b>–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{data['number']}</code>\n"
                                        f"<b>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> <code>{data['nickname']}</code>\n"
                                        f"<b>–ê–π–¥–∏:</b> <code>{data['id']}</code>\n"
                                        f"<b>–¢–µ–≥–∏:</b> <code>{data['tags']}</code>\n"
                                        f"<b>–ñ–∞–ª–æ–±–∞:</b> \n\n{data['information']}\n\n",
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        reply_markup=send_or_not())
    await ThisStatecer.finish.set()

def generate_complaint_id():
    timestamp = int(time.time())
    random_component = random.randint(1000, 9999)
    complaint_id = f"{timestamp}{random_component}"
    return complaint_id

@dp.callback_query_handler(text='yes_send', state=ThisStatecer.finish)
@rate_limit(1, 'start')
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await bot.delete_message(callback.message.chat.id, int(callback.message.message_id))
    async with state.proxy() as data:
        data["time"] = get_dates()
        data["user"] = callback.message.chat.id
        image = open('images/meeten_ban.jpeg', 'rb')
        await bot.send_message(group_moderation, f"üî∏ –û—Ç–ª–∏—á–Ω–æ, –º—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏: \n\n"
                                        f"<b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{data['type']}</code>\n"
                                        f"<b>–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{data['number']}</code>\n"
                                        f"<b>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> <code>{data['nickname']}</code>\n"
                                        f"<b>–ê–π–¥–∏:</b> <code>{data['id']}</code>\n"
                                        f"<b>–¢–µ–≥–∏:</b> <code>{data['tags']}</code>\n"
                                        f"<b>–ñ–∞–ª–æ–±–∞:</b> \n\n{data['information']}\n\n", reply_markup=check_or_not(callback.message.chat.id, data['id']))
        await bot.send_photo(chat_id=callback.message.chat.id, photo=image, caption= f"üî∏ –û—Ç–ª–∏—á–Ω–æ, –º—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏: \n\n"
                                        f"<b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{data['type']}</code>\n"
                                        f"<b>–ù–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{data['number']}</code>\n"
                                        f"<b>–ù–∏–∫–Ω–µ–π–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è:</b> <code>{data['nickname']}</code>\n"
                                        f"<b>–ê–π–¥–∏:</b> <code>{data['id']}</code>\n"
                                        f"<b>–¢–µ–≥–∏:</b> <code>{data['tags']}</code>\n"
                                        f"<b>–ñ–∞–ª–æ–±–∞:</b> \n\n{data['information']}\n\n", reply_markup=check_user_out_func(callback.message.chat.id))
        add_complaint(data)
    await state.finish()
                                                                                
    
@dp.callback_query_handler(text='no_send', state=ThisStatecer.finish)
@rate_limit(1, 'start')
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.delete()
    await bot.send_message(chat_id=callback.message.chat.id, 
                        text=f"üî∏ <b>–ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! </b> \n\n", reply_markup=check_user_out_func(callback.message.chat.id))

@dp.callback_query_handler(regexp="no_check_([0-9]*)", state=Filter.check)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    unique_id = re.findall(r'^no_check_(\d+)', callback.data)[0]
    del_msg = await callback.message.reply("üî∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∞—Ä—É–π—Ç–µ –æ—Ç–∫–∞–∑: ")
    async with state.proxy() as data:
            data["unique_id"] = unique_id
            data["del_msg"] = del_msg
            await callback.message.edit_text(text="üî∏ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã: </b> ", reply_markup = sort_by(callback.message.chat.id, data))
            await Filter.begin.set()
    await Moder.comment.set()


@dp.message_handler(state=Moder.comment)
async def filter_messages2(message: aiogram.types.Message, state: FSMContext):
     await message.delete()
     async with state.proxy() as data:
            user_id = get_user_id_by_unique_id(data["unique_id"])
            await data["del_msg"].delete()
            await bot.send_message(chat_id=user_id, text= "üî∏ <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ </b>\n"
                                                        f"üî∏–ê–π–¥–∏: {data['unique_id']}\n"
                                                        f"üî∏ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {message.text}", reply_markup=check_user_out_func(message.chat.id))
            update_complaint_status(data['unique_id'], -1)
     await state.finish()

@dp.callback_query_handler(regexp="yes_check_([0-9]*)", state=Filter.check)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    unique_id = re.findall(r'^yes_check_(\d+)', callback.data)[0]
    async with state.proxy() as data:
            data["unique_id"] = unique_id
            print(data)
            update_complaint_status(data['unique_id'], 1)
            user_id = get_user_id_by_unique_id(data["unique_id"])
            await bot.send_message(chat_id=user_id, text= "üî∏ <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ </b>\n"
                                                        f"üî∏ –ê–π–¥–∏: {unique_id}\n", reply_markup=check_user_out_func(user_id))
            await callback.message.edit_text(text="üíö <b>–ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: </b> ", reply_markup = sort_by(callback.message.chat.id, data))
            await Filter.begin.set()

@dp.callback_query_handler(regexp="yes_review_([0-9]*)", state=Filter.check)
async def qiwi_payment(callback: aiogram.types.CallbackQuery, state: FSMContext):
    unique_id = re.findall(r'^yes_review_(\d+)', callback.data)[0]
    async with state.proxy() as data:
            data["unique_id"] = unique_id
            update_complaint_status(data['unique_id'], 3)
            user_id = get_user_id_by_unique_id(data["unique_id"])
            await bot.send_message(chat_id=user_id, text= "üî∏ <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ </b>\n"
                                                        f"üî∏ –ê–π–¥–∏: {unique_id}\n")
            await callback.message.edit_text(text="üíö <b>–ñ–∞–ª–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: </b> ", reply_markup = sort_by(callback.message.chat.id, data))
            await Filter.begin.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
def get_dates():
    return datetime.datetime.today().replace(microsecond=0)

@dp.message_handler(content_types=['text', 'photo', 'video'])
async def filter_messages2(message: aiogram.types.Message):
    print(message.chat.id)


@dp.callback_query_handler(regexp="ban_([0-9]*)", state=Filter.check)
async def delete_message(call: CallbackQuery):
    get_channel_id_from_out_range = re.findall(r'^ban_(\d+)', call.data)[0]
    with open('text/blacklist.txt', 'a+', encoding='utf-8') as f_1:
        f_1.write(get_channel_id_from_out_range + ' ')
        f_1.flush()
    await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å</b> \n<b>–ï–≥–æ ID: </b> {get_channel_id_from_out_range}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è')



@dp.callback_query_handler(regexp="add_([0-9]*)", state="*")
async def delete_message(call: CallbackQuery):
    get_channel_id_from_out_range = re.findall(r'^ban_(\d+)', call.data)[0]
    with open('text/blacklist.txt', 'a+', encoding='utf-8') as f_1:
        f_1.write(get_channel_id_from_out_range + ' ')
        f_1.flush()
    await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å</b> \n<b>–ï–≥–æ ID: </b> {get_channel_id_from_out_range}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è')

def check_user_banned(user_id):
    return False

@dp.callback_query_handler(regexp="unban_([0-9]*)", state="*")
async def delete_message(call: CallbackQuery):
    get_channel_id_from_out_range = re.findall(r'^unban_(\d+)', call.data)[0]
    await bot.unban_chat_sender_chat(chat_id=username_group_frametamer, sender_chat_id=int('-' + get_channel_id_from_out_range))
    f_1 = open('whitelist.txt', 'a+', encoding='utf-8')
    f_1.write(get_channel_id_from_out_range+' ')
    f_1.close()
    await call.message.edit_text(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω –∏ –∑–∞–Ω–µ—Å–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫</b>\n<b>–ï–≥–æ ID: </b> {get_channel_id_from_out_range}  \n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è')

async def on_startup(dp):
    await set_default_commands(dp)

if __name__ == "__main__":
    create_bdx()
    dp.middleware.setup(ThrottlingMiddleware())
    aiogram.executor.start_polling(dp, skip_updates=True, on_startup=on_startup)